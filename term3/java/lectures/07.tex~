\chapter{Android}

activity%что это?
intent%что это?
BroadCastReceiver%что это?
их нужно указывать в android-манифесте
PendingIntent -- тот, кто его распространяет, даёт свои права на выполнение чего-то приложению, которому этот intent посылает

Context -- базовый класс, предоставляющий доступ ко всем андроидовским ресурсам. Activity является его наследником. BroadCastInten - нет,
но ему надо передавать контекст, пототму что чего-то ему там нужно

%lesson3
Для продолжительных действий Bra=oadCastReceiver не подходит, нам нужен service(прописывается в манифесте). 
Добавились два permission'a: INTERNET и NETWORK\_STATE.

Создаём интент и указываем, кого хотим запустить. Интент -- такой способ общаться между процессами.
IntentService -- скармливает нам интенты из очереди по одному. Отлично, чтобы тихонечко работать в фоновом режиме.
Location -- получаем из intent'a. Кастить надо к чему-то тому, потому что иначе вылетит exception.
URL собирается каким-то андроидовским API.
connetion -- получается от url'a.
\begin{javacode}
connection.setRequestMethod("GET");//мы хотим получать данные
\end{javacode}
Дальше получаем строчку через InputStream. ЧИтаем его. В примере -- JSON, а не XML, просто потому что, проще ему так. 
Правда, он даже не парсит его.


Полезно подумать об оффлайн-работе.
%lesson4
Получить результат по сети и сохранить его в базу данных.
provider -- наш content-provider
class Contract -- android требует описать структуру базы данных в отдельном классе сначала.
Названия колонок, типы записей, URI
CONTENT\_TYPE -- тип набора записей
CONTENT\_ITEM\_TYPE -- тип одной записи
implements BaseColumns -- ну, так надо

DBHelper -- мы через него создаём  базу данных
использует SQLite, как видно
createtable -- всякие имена, ещё чего-то

Иногда БД надо менять, поэтому есть ещё поле "DATABASE\_VERSION" 
"--- 
если текущая версия не соответствует версии, 
которую сейчас ожидает приложение, то 
вызовется метод onUpgrade().

WheatherProvider: итилитарные методы всякие
bulkInsert -- вставить не по одмону, а сразу пачкой
getType -- единственный метод, использующий поля типа в Contract'e.
sUriMatcher -- проверяет конкретный URI относительно шаблона. 
Мы по результату будем понимать тип запроса и что нам возвращать.

Почему мы нигде connection  в базе данных не закрываем?
"ОС сама всё потом освободит"
В поздних версия появился метод для дебага, закрывающий connection -- но только для дебага.

Об изменениях базы данных неплохо бы оповестить интересующихся. Метод NotifyChange, которому передаётся URI.
Чтобы сделать его доступным извне, нужно в манифесте надо прописать android.exported="true".
Если у нас false, то не очень понятно, зачем городить отдельный contentProvider -- но пусть будет, нам должны были его показать.
А так можно было и напрямую к базе данных пообращаться.

%lesson5
Весь UI в большинстве приложений распихан по фрагментам.
Model, в котором лежат данные, по которым строится UI, и View, который рисует, разделены
Adapter -- через него происходит доступ к данным, которые надо отображать, он оповещает, кого нужно, и тыкает View, когда нужно 
CursurAdapter -- если нужен доступ к базе данных
newView:
parent -- куда её положить; у нас некуда
Layout описывает расположение рисуемых элементов.
Поле androi:id -- штука, по которой потом можно будет потом данный элемент найти в программе. Имя туда какое-нибудь запишем.
LayoutInflater -- получает созданную нами XML-описание и строит по ней дерево объектов
%вообще, для разных типов экранов разумно делать разные описания xml
newView - создаёт новый view. Можем положить туда в приватное поле какие-то даннные, если нужно вместе с ней хранить, через метод setTag.
%Можно, например, кешировать результаты поиска в дереве -- чтобы много раз одно и то же не искать, если мы хотим какое-то поле обновлять.
bindView -- заполняет вьюшку данными(новую не всегда надо создавать, а чтобы переиспользовать старую, её нужно дать данные)

CursorLoader -- стандартный для загрузки данных из базы данных.
swapCursor освобождает старый курсор и заполняет его новыми переданными данными(если надо дропнуть курсор -- закончились мы, например --
можно передать null). Так Adapter можно оповещать об изменениях в данных, чтобы он передавал изменения во "вьюхи".

%lesson6
%няшный UI'чик
%а точнее -- ресурсы
Если хочется добавить файлы, layout'ы. Их чего-то по пять штук добавляется...
Суффиксы -- размер экрана и плотность пикселей; портретная/альбомнаяя ориентация экрана; локализация; ...
